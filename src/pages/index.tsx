import type { NextPage } from "next";
import { signIn, signOut } from "next-auth/react";
import Head from "next/head";
import { useCallback, useState } from "react";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const [content, setContent] = useState("");
  const hello = trpc.useQuery(["example.hello", { text: "from tRPC" }]);
  const auth = trpc.useQuery(["auth.getSession"]);
  const todo = trpc.useQuery(["todo.getAll"]);
  const create = trpc.useMutation(["todo.create"]);

  const onCreateTodo = useCallback(() => {
    if (!auth.data) return;
    create.mutate(
      {
        userId: auth.data.user.id,
        status: "incomplete",
        content,
      },
      {
        onSuccess: () => {
          setContent("");
          todo.refetch();
        },
      }
    );
  }, [content, todo, create, auth]);

  console.log({ auth, todo });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          Create <span className="text-purple-300">T3</span> App
        </h1>
        <p className="text-2xl text-gray-700">This stack uses:</p>
        {/* <div className="grid gap-3 pt-3 mt-3 text-center md:grid-cols-2 lg:w-2/3">
          <TechnologyCard
            name="NextJS"
            description="The React framework for production"
            documentation="https://nextjs.org/"
          />
          <TechnologyCard
            name="TypeScript"
            description="Strongly typed programming language that builds on JavaScript, giving you better tooling at any scale"
            documentation="https://www.typescriptlang.org/"
          />
          <TechnologyCard
            name="TailwindCSS"
            description="Rapidly build modern websites without ever leaving your HTML"
            documentation="https://tailwindcss.com/"
          />
          <TechnologyCard
            name="tRPC"
            description="End-to-end typesafe APIs made easy"
            documentation="https://trpc.io/"
          />
          <TechnologyCard
            name="Next-Auth"
            description="Authentication for Next.js"
            documentation="https://next-auth.js.org/"
          />
          <TechnologyCard
            name="Prisma"
            description="Build data-driven JavaScript & TypeScript apps in less time"
            documentation="https://www.prisma.io/docs/"
          />
        </div> */}
        <div className="pt-6 text-2xl text-blue-500 flex justify-center items-center flex-col w-full">
          {hello.data ? <p>{hello.data.greeting}</p> : <p>Loading..</p>}
          {!auth.data && <button onClick={() => signIn()}>signin</button>}
          {auth.data && <button onClick={() => signOut()}>signout</button>}
        </div>

        {auth.data && (
          <div>
            {auth.data.user.image && <img src={auth.data.user.image} alt="" />}
            <p>name: {auth.data.user.name}</p>
            <p>emal: {auth.data.user.email}</p>
          </div>
        )}
        {todo.data && (
          <ul className="space-y-4">
            {!!todo.data.length && <li>TODOS</li>}
            {todo.data.map((item) => (
              <li key={item.id}>
                <h4>{item.content}</h4>
                <p>{`createdAt: ${item.createdAt}`}</p>
              </li>
            ))}
          </ul>
        )}
        {auth.data && (
          <div>
            <h3>create</h3>
            <form
              onSubmit={(e) => {
                e.preventDefault();
                onCreateTodo();
              }}
              className="flex flex-col w-full"
            >
              <textarea
                value={content}
                onChange={(e) => setContent(e.target.value)}
                className="w-full border p-4 h-56"
              ></textarea>
              <button type="submit">Create</button>
            </form>
          </div>
        )}
      </main>
    </>
  );
};

export default Home;

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section className="flex flex-col justify-center p-6 duration-500 border-2 border-gray-500 rounded shadow-xl motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <a
        className="mt-3 text-sm underline text-violet-500 decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </a>
    </section>
  );
};
